// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveBaseQuadratureEncoder1;
    public static CANTalon driveBaseLeftFrontMotor;
    public static CANTalon driveBaseLeftRearMotor;
    public static CANTalon driveBaseRightFrontMotor;
    public static CANTalon driveBaseRightRearMotor;
    public static RobotDrive driveBaseRobotDrive;
    public static SpeedController ballIntakeBrush;
    public static SpeedController ballShooterleftvictor;
    public static SpeedController ballShooterrightvictor;
    public static RobotDrive ballShooterShooting;
    public static SpeedController gateLifterGateLifterVictor;
    public static AnalogPotentiometer gateLifterPotDisplay;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveBase", "Quadrature Encoder 1", driveBaseQuadratureEncoder1);
        driveBaseQuadratureEncoder1.setDistancePerPulse(1.0);
        driveBaseQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        driveBaseLeftFrontMotor = new CANTalon(0);
        LiveWindow.addActuator("DriveBase", "Left Front Motor", driveBaseLeftFrontMotor);
        
        driveBaseLeftRearMotor = new CANTalon(1);
        LiveWindow.addActuator("DriveBase", "Left Rear Motor", driveBaseLeftRearMotor);
        
        driveBaseRightFrontMotor = new CANTalon(2);
        LiveWindow.addActuator("DriveBase", "Right Front Motor", driveBaseRightFrontMotor);
        
        driveBaseRightRearMotor = new CANTalon(3);
        LiveWindow.addActuator("DriveBase", "Right Rear Motor", driveBaseRightRearMotor);
        
        driveBaseRobotDrive = new RobotDrive(driveBaseLeftFrontMotor, driveBaseLeftRearMotor,
              driveBaseRightFrontMotor, driveBaseRightRearMotor);
        
        driveBaseRobotDrive.setSafetyEnabled(true);
        driveBaseRobotDrive.setExpiration(0.1);
        driveBaseRobotDrive.setSensitivity(0.5);
        driveBaseRobotDrive.setMaxOutput(1.0);

        ballIntakeBrush = new Victor(4);
        LiveWindow.addActuator("Ball Intake", "Brush", (Victor) ballIntakeBrush);
        
        ballShooterleftvictor = new Victor(0);
        LiveWindow.addActuator("Ball Shooter", "left victor", (Victor) ballShooterleftvictor);
        
        ballShooterrightvictor = new Victor(1);
        LiveWindow.addActuator("Ball Shooter", "right victor", (Victor) ballShooterrightvictor);
        
        ballShooterShooting = new RobotDrive(ballShooterleftvictor, ballShooterrightvictor);
        
        ballShooterShooting.setSafetyEnabled(true);
        ballShooterShooting.setExpiration(0.1);
        ballShooterShooting.setSensitivity(0.5);
        ballShooterShooting.setMaxOutput(1.0);

        gateLifterGateLifterVictor = new Talon(3);
        LiveWindow.addActuator("Gate Lifter", "Gate Lifter Victor", (Talon) gateLifterGateLifterVictor);
        
        gateLifterPotDisplay = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Gate Lifter", "PotDisplay", gateLifterPotDisplay);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
