

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.subsystems;

import org.usfirst.frc5265.Robot01.RobotMap;
import org.usfirst.frc5265.Robot01.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class GateLifter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController gateLifterVictor = RobotMap.gateLifterGateLifterVictor;
    private final AnalogPotentiometer potDisplay = RobotMap.gateLifterPotDisplay;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    private final double potUpperLimit = SmartDashboard.getNumber("Upper Pot", 0.6);
    private final double potLowerLimit = SmartDashboard.getNumber("Lower Pot", 0.4);;
    
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	SmartDashboard.getNumber("Upper Pot", 0.6);
    	
    }
    protected double returnPIDInput(){
    	log();
    	return potDisplay.pidGet();
    	
    }
    
    public static void log() {
        //SmartDashboard.putData("pot value", potDisplay);
    }

   
    
    public void up(){
    	
    	while (returnPIDInput() < potUpperLimit){
    		gateLifterVictor.set(1);
    	}
    }
    
    public void stop(){
    	
    	gateLifterVictor.set(0);
    }

    
    public void down(){
    	while (returnPIDInput() > potLowerLimit){
    		gateLifterVictor.set(-1);
    	}
    }
}

