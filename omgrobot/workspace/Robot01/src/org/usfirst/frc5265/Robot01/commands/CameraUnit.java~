// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.commands;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.vision.USBCamera;

import java.util.ArrayList;

import org.usfirst.frc5265.Robot01.Robot;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

/**
 *
 */
public class CameraUnit extends Command {
	private Image frame;
	private ArrayList<USBCamera> cams;
	private int currCam;
	private USBCamera cam;
	private int MAX_FPS = 15;
	private int Quality = 10;
	private final long SLEEP_TIME = 100;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CameraUnit() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	cams = new ArrayList<USBCamera>();
    	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	currCam = 0;
    	CameraServer.getInstance().setQuality(Quality);
    	String[] items = {"cam0","cam1"};
    	for(String s: items){
    		addCamera(s);
    	}
    	cam = cams.get(currCam);
    	cam.openCamera();
    	cam.startCapture();
    }
    private void addCamera(String camName){
    	
    	USBCamera temp = new USBCamera(camName);
    	temp.setFPS(MAX_FPS);
    	cams.add(temp);
    	temp = null;
    	
    }
public void switchCamera(){
	try{
		
		cam.stopCapture();
		cam.closeCamera();
		currCam++;
		currCam %= cams.size();
		cam = cams.get(currCam);
		cam.openCamera();
		cam.startCapture();
		cam.startCapture();
		Thread.sleep(SLEEP_TIME);
	}catch(Exception e){
		e.printStackTrace();
		
	}
	
	
}

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
