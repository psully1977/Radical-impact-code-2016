// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5265.Robot01.Robot;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

//import edu.wpi.first.wpilibj.CANSpeedJoystick;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Config;
import edu.wpi.first.wpilibj.Joystick;

/**
 *
 */
public class SwitchCamera extends Command {
/*
		private final int camFront;
		private final int camRear;
		private int curCam;
		private Image frame;
		private CameraServer server;

public SwitchCamera()
		{
	        // Get camera ids by supplying camera name ex 'cam0', found on roborio web interface
	        camFront = NIVision.IMAQdxOpenCamera(Config.SwitchCamera.camNameFront, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
	        camRear = NIVision.IMAQdxOpenCamera(Config.SwitchCamera.camNameBack, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
	        curCam = camFront;
	        // Img that will contain camera img
	        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
	        // Server that we'll give the img to
	        server = CameraServer.getInstance();
	        server.setQuality(Config.SwitchCamera.imgQuality);
		} 

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	
	
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    //public SwitchCamera() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
	public void run()
	{
		if (curCam == camFront)
			changeCam(camRear);
		else
			changeCam(camFront);
		updateCam();
	}

    // Called repeatedly when this Command is scheduled to run
	public void end()
	{
		NIVision.IMAQdxStopAcquisition(curCam);
	}

	public void changeCam(int newId)
    {
		NIVision.IMAQdxStopAcquisition(curCam);
    	NIVision.IMAQdxConfigureGrab(newId);
    	NIVision.IMAQdxStartAcquisition(newId);
    	curCam = newId;
    }
	public void updateCam()
    {
    	NIVision.IMAQdxGrab(curCam, frame, 1);
        server.setImage(frame);
    }

	@Override
	public void initialize() {
		// TODO Auto-generated method stub
		//changeCam(camFront);
	}
	

	@Override
	protected void execute() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected boolean isFinished() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected void interrupted() {
		// TODO Auto-generated method stub
		
	}

	public void init() {
		// TODO Auto-generated method stub
		
		
	}
	*/
	 // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
	
}
